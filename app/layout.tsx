import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { ThemeProvider } from "./components/theme-provider";
import prisma from "./lib/db";
import { getKindeServerSession } from "@kinde-oss/kinde-auth-nextjs/server";
import { Navbar } from "./components/NavBar";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

async function getUserColorScheme(userId: string | null): Promise<string> {
  if (!userId) return "theme-orange";
  const user = await prisma.user.findUnique({
    where: { id: userId },
    select: { colorScheme: true },
  });
  return user?.colorScheme ?? "theme-orange";
}

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const { getUser } = getKindeServerSession();
  const user = await getUser();
  const colorScheme = await getUserColorScheme(user?.id || null);

  return (
    <html lang="en" suppressHydrationWarning>
      <body className={inter.className} suppressHydrationWarning>
        <ThemeProvider
          attribute="class"
          defaultTheme={colorScheme}
          enableSystem
          disableTransitionOnChange
          storageKey="app-theme" // Add a storage key for persistence
        >
          <Navbar />
          {children}
        </ThemeProvider>
      </body>
    </html>
  );
}